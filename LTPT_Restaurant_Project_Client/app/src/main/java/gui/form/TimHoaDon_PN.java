/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.form;

import dao.HoaDon_DAO;
import gui.swing.table.TableCustom;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author pc
 */
public class TimHoaDon_PN extends javax.swing.JPanel{
    
    /**
     * Creates new form pn_TimVocher
     */
    public TimHoaDon_PN() {
        initComponents();
        customTable();
        load();
    }
    
    private void customTable() {
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);
        tabThongTinHD.getTableHeader().setFont(new Font("Sanserif", Font.BOLD, 12));
        tabThongTinHD.getTableHeader().setBackground(new Color(50, 50, 50));
        tabThongTinHD.repaint();
        buttonGroup1.add(radGiamDan);
         buttonGroup1.add(radTangDan);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblTieuChiTimKiem = new javax.swing.JLabel();
        lblNhapThongTin = new javax.swing.JLabel();
        lblSapXep = new javax.swing.JLabel();
        lblLoaiDon = new javax.swing.JLabel();
        txtNhapThonTin = new javax.swing.JTextField();
        cbmTieuChiTimKiem = new javax.swing.JComboBox<>();
        cmbLoaiDon = new javax.swing.JComboBox<>();
        cmbSapXep = new javax.swing.JComboBox<>();
        radTangDan = new javax.swing.JRadioButton();
        radGiamDan = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabThongTinHD = new javax.swing.JTable();
        btnReset = new gui.component.Button();
        btnTimKiem = new gui.component.Button();
        lblDate1 = new javax.swing.JLabel();
        jdate1 = new com.toedter.calendar.JDateChooser();
        lblDate2 = new javax.swing.JLabel();
        jdate2 = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 718));

        lblTieuChiTimKiem.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblTieuChiTimKiem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTieuChiTimKiem.setText("Chọn tiêu chí tìm kiếm :");

        lblNhapThongTin.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblNhapThongTin.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNhapThongTin.setText("Nhập thông tin :");

        lblSapXep.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblSapXep.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSapXep.setText("Sắp xếp");

        lblLoaiDon.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblLoaiDon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblLoaiDon.setText("Chọn loại đơn");

        txtNhapThonTin.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtNhapThonTin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNhapThonTinActionPerformed(evt);
            }
        });

        cbmTieuChiTimKiem.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cbmTieuChiTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Chọn tiêu chí tìm kiếm --", "Mã hóa đơn", "Số điện thoại", "Tên khách hàng", "Số bàn" }));

        cmbLoaiDon.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cmbLoaiDon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Chưa thanh toán", "Đã thanh toán" }));
        cmbLoaiDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLoaiDonActionPerformed(evt);
            }
        });

        cmbSapXep.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cmbSapXep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Chọn tiêu chí sắp xếp --", "Tổng tiền", "Tổng tiền thực tế" }));
        cmbSapXep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSapXepActionPerformed(evt);
            }
        });

        radTangDan.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        radTangDan.setText("Tăng dần");
        radTangDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radTangDanActionPerformed(evt);
            }
        });

        radGiamDan.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        radGiamDan.setText("Giảm dần");
        radGiamDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGiamDanActionPerformed(evt);
            }
        });

        tabThongTinHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hóa đơn", "Ngày lập", "Tên khách hàng", "Số điện thoại", "Tổng tiền ", "Tổng tiền thực tế", "Số bàn", "Trạng thái"
            }
        ));
        tabThongTinHD.setShowGrid(true);
        tabThongTinHD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabThongTinHDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabThongTinHD);

        btnReset.setBackground(new java.awt.Color(50, 50, 50));
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icon/icons8-refresh-32.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnTimKiem.setBackground(new java.awt.Color(50, 50, 50));
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icon/icons8-search-32.png"))); // NOI18N
        btnTimKiem.setText("Tìm Kiếm");
        btnTimKiem.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        lblDate1.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblDate1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate1.setText("Từ");

        jdate1.setDateFormatString("dd/MM/yyyy");
        jdate1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        lblDate2.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblDate2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDate2.setText("Đến");

        jdate2.setDateFormatString("dd/MM/yyyy");
        jdate2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(63, 63, 63))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNhapThongTin, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTieuChiTimKiem)
                            .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jdate1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(cbmTieuChiTimKiem, 0, 233, Short.MAX_VALUE)
                            .addComponent(txtNhapThonTin)
                            .addComponent(jdate2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLoaiDon)
                            .addComponent(lblSapXep))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbSapXep, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(radTangDan)
                                .addGap(40, 40, 40)
                                .addComponent(radGiamDan))
                            .addComponent(cmbLoaiDon, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(53, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTieuChiTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbmTieuChiTimKiem))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbLoaiDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblLoaiDon)))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNhapThongTin)
                            .addComponent(txtNhapThonTin)
                            .addComponent(lblSapXep)
                            .addComponent(cmbSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radTangDan)
                            .addComponent(radGiamDan)
                            .addComponent(lblDate1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jdate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate2))))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radTangDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radTangDanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radTangDanActionPerformed

    private void radGiamDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radGiamDanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radGiamDanActionPerformed

    private void txtNhapThonTinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNhapThonTinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNhapThonTinActionPerformed

    private void cmbSapXepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSapXepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSapXepActionPerformed

    private void cmbLoaiDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLoaiDonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbLoaiDonActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        System.out.println("OK");
        if(checkValue() == true){
            System.out.println("OK 1");
            deleteTableRow();
            thucThi();
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        deleteTableRow();
        cbmTieuChiTimKiem.setSelectedIndex(0);
        txtNhapThonTin.setText("");
        cmbLoaiDon.setSelectedIndex(0);
        cmbSapXep.setSelectedIndex(0);
        radTangDan.setSelected(false);
        radGiamDan.setSelected(false);
        jdate1.setDate(null);
        jdate2.setDate(null);
    }//GEN-LAST:event_btnResetActionPerformed


    private void tabThongTinHDMouseClicked(java.awt.event.MouseEvent evt)  {
        int row = tabThongTinHD.getSelectedRow();
        HoaDon_DAO dao_timKiemDonDatBan = new HoaDon_DAO();
        if(row != -1){
            String maHD = tabThongTinHD.getValueAt(row,0).toString();
            Object[] ob = (Object[]) dao_timKiemDonDatBan.timKiemHD(maHD);
            ArrayList<Object[]> list = dao_timKiemDonDatBan.timKiemCTHD(maHD);
            String soBan = ob[0].toString();
            String ngayLap =  ob[1].toString();
            String tenNV = "";
            if(ob[2] != null){
                tenNV = ob[2].toString();
            }
            String tenKH = ob[3] == null ? "" :  ob[3].toString();
            String maKM = ob[4] == null ? "" : ob[4].toString();
            String trangThai = ob[5].toString() == "0" ? "Chưa thanh toán" : "Đã thanh toán";
            float tongTien = Float.parseFloat(ob[6].toString());
            float VAT = Float.parseFloat(ob[7].toString());
            float giamGiaKM =  ob[8]  == null ? 0 : Float.parseFloat(ob[8].toString());
            float giaDV =Float.parseFloat(ob[9].toString());
            float giamGiaTV = Float.parseFloat(ob[10].toString());
            float giamGiaNS = Float.parseFloat(ob[11].toString());
            float tienCoc = ob[12] == null ? 0 : Float.parseFloat(ob[12].toString());
            String maLoaiBan = ob[13].toString();
            if(maLoaiBan.equals("LB001") == true || maLoaiBan.equals("LB002") == true){
                maLoaiBan = "0";
            }
            else{
                maLoaiBan = "100000";
            }
            float tongTienTT = Float.parseFloat(ob[14].toString());
            String gioVao = ob[15].toString();
            String gioRa = ob[16].toString();
            ChiTietHoaDon_Form form = new ChiTietHoaDon_Form(maHD,soBan,ngayLap,tenNV,tenKH,maKM, trangThai,tongTien,VAT,giamGiaKM, giaDV,giamGiaTV,giamGiaNS, tienCoc, maLoaiBan, tongTienTT, list,gioVao,gioRa);
            form.setVisible(true);
        }
    }



    public void thucThi() {

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        HoaDon_DAO dao_timKiemDonDatBan = new HoaDon_DAO();

        String txtTieuChiTimKiem = cbmTieuChiTimKiem.getSelectedItem().toString();
        String txtNhapThongTin = txtNhapThonTin.getText().toString();
        String txtLoaiDon = cmbLoaiDon.getSelectedItem().toString();
        String txtNgay1 = "";
        String txtNgay2 = "";
        
        
    



        if(jdate1.getDate() != null && jdate2.getDate() != null){
            txtNgay1 = dateFormat.format(jdate1.getDate());
            txtNgay2 = dateFormat.format(jdate2.getDate());
        }

        String loaiDon = "";
        if(txtLoaiDon.equals("Tất cả") == true){
            loaiDon = "";
        }
        else if(txtLoaiDon.equals("Chưa thanh toán") == true){
            loaiDon = "0";
        }
        else if(txtLoaiDon.equals("Đã thanh toán") == true){
            loaiDon = "1";
        }


        String txtSapXep = cmbSapXep.getSelectedItem().toString();
        if(txtSapXep.equals("-- Chọn tiêu chí sắp xếp --")){
            txtSapXep =  "";
        }
        else if(txtSapXep.equals("Tổng tiền") == true){
            txtSapXep = "tongTien";
        }
        else if(txtSapXep.equals("Tổng tiền thực tế") == true){
            txtSapXep = "tongTienTT";
        }
        String txtSort = radTangDan.isSelected() == true ? "ASC" : "DESC";
        deleteTableRow();

        if(txtTieuChiTimKiem.equals("Mã hóa đơn") == true){
            Object[] ob = (Object[])dao_timKiemDonDatBan.timKiemHoaDonTheoMa(txtNhapThongTin,txtNgay1,txtNgay2);
            if(ob == null || ob.length == 0){
                JOptionPane.showMessageDialog(null, "Không tìm thấy hóa đơn");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tabThongTinHD.getModel();
            ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
            ob[5] = dinhDangVND(Double.parseDouble(ob[5].toString()));
            model.addRow(ob);
        }
        else if(txtTieuChiTimKiem.equals("Số điện thoại") == true){
            ArrayList<Object[]> list = dao_timKiemDonDatBan.timKiemHoaDonTheoSTD(txtNhapThongTin, loaiDon, txtSapXep, txtSort,txtNgay1,txtNgay2);
            if(list.size() == 0){
                JOptionPane.showMessageDialog(null, "Không tìm thấy hóa đơn");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tabThongTinHD.getModel();
            for(Object[] ob : list){
                ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                ob[5] = dinhDangVND(Double.parseDouble(ob[5].toString()));
                model.addRow(ob);
            }
        }
        else if(txtTieuChiTimKiem.equals("Tên khách hàng") == true){
            ArrayList<Object[]> list = dao_timKiemDonDatBan.timKiemHoaDonTheoTenKH(txtNhapThongTin, loaiDon, txtSapXep, txtSort,txtNgay1,txtNgay2);
            if(list.size() == 0){
                JOptionPane.showMessageDialog(null, "Không tìm thấy hóa đơn");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tabThongTinHD.getModel();
            for(Object[] ob : list){
                ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                ob[5] = dinhDangVND(Double.parseDouble(ob[5].toString()));
                model.addRow(ob);
            }
        }
        else if(txtTieuChiTimKiem.equals("Số bàn") == true){
            System.out.println(txtSapXep);           
            System.out.println(txtSort);
            System.out.println(txtNgay1);
            System.out.println(txtNgay2);

            System.out.println("Vào tìm số bàn");
            ArrayList<Object[]> list = dao_timKiemDonDatBan.timKiemHoaDonTheoSoBan(txtNhapThongTin, loaiDon, txtSapXep, txtSort,txtNgay1,txtNgay2);
            if(list.size() == 0){
                JOptionPane.showMessageDialog(null, "Không tìm thấy hóa đơn");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tabThongTinHD.getModel();
            for(Object[] ob : list){
                ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                ob[5] = dinhDangVND(Double.parseDouble(ob[5].toString()));
                model.addRow(ob);
            }
        }



    }

    public void deleteTableRow(){
        DefaultTableModel model = (DefaultTableModel) tabThongTinHD.getModel();
        model.getDataVector().removeAllElements();
    }

    public boolean checkValue(){
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String txtTieuChiTimKiem = cbmTieuChiTimKiem.getSelectedItem().toString();
        String txtSapXep = cmbSapXep.getSelectedItem().toString();
        String txtDate1 = "";
        String txtDate2 = "";
        if(jdate1.getDate() != null && jdate2.getDate() != null){
            txtDate1 = dateFormat.format(jdate1.getDate());
            txtDate2 = dateFormat.format(jdate2.getDate());
        }
        
        if(txtTieuChiTimKiem.equals("-- Chọn tiêu chí tìm kiếm --") == true){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn tiêu chí tìm kiếm");
            return false;
        }
        else if(txtSapXep.equals("-- Chọn tiêu chí sắp xếp --") == false && (radGiamDan.isSelected() == false && radTangDan.isSelected() == false)){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn tiêu chí sắp xếp");
            return false;
        }
        else if(txtDate1.compareTo(txtDate2) > 0){
            JOptionPane.showMessageDialog(null, "Ngày chọn sau phải lớn hơn ngày chọn trước");
            return false;
        }
        return true;

    }

    private void load(){
        try{
            HoaDon_DAO dao_timKiemDonDatBan = new HoaDon_DAO();
            ArrayList<Object[]> list = dao_timKiemDonDatBan.hoaDonTrongNgay();
            DefaultTableModel model = (DefaultTableModel) tabThongTinHD.getModel();
            for(Object[] ob : list){
                ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                ob[5] = dinhDangVND(Double.parseDouble(ob[5].toString()));
                model.addRow(ob);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public String dinhDangVND(double x){
        DecimalFormat decimalFormat = new DecimalFormat("#,###");
        String formatted = decimalFormat.format(x).replace(",", " ");

        return formatted + " VNĐ";
    }

    public int huyDinhDangVND(String s){
        String newString[] = s.split("\\s+");
        String newS = "";
        for (int i = 0; i < newString.length - 1; i++) {
            newS += newString[i];
        }

        return Integer.parseInt(newS);
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.component.Button btnReset;
    private gui.component.Button btnTimKiem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbmTieuChiTimKiem;
    private javax.swing.JComboBox<String> cmbLoaiDon;
    private javax.swing.JComboBox<String> cmbSapXep;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdate1;
    private com.toedter.calendar.JDateChooser jdate2;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblLoaiDon;
    private javax.swing.JLabel lblNhapThongTin;
    private javax.swing.JLabel lblSapXep;
    private javax.swing.JLabel lblTieuChiTimKiem;
    private javax.swing.JRadioButton radGiamDan;
    private javax.swing.JRadioButton radTangDan;
    private javax.swing.JTable tabThongTinHD;
    private javax.swing.JTextField txtNhapThonTin;
    // End of variables declaration//GEN-END:variables
}
