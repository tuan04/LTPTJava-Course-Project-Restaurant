/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.form;

import dao.DonDatBan_DAO;
import gui.swing.table.TableCustom;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

/**
 *
 * @author pc
 */
public class TimDonDatBan_PN extends javax.swing.JPanel{

    /**
     * Creates new form pn_TimVocher
     */
    public TimDonDatBan_PN() {
        initComponents();
        customTable();
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnTimKiemActionPerformed(evt);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnResetActionPerformed(evt);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        });
        tabThongTinDDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    tabThongTinDDBMouseClicked(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        load();
    }
    
    private void customTable() {
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);
        tabThongTinDDB.getTableHeader().setFont(new Font("Sanserif", Font.BOLD, 12));
        tabThongTinDDB.getTableHeader().setBackground(new Color(50, 50, 50));
        tabThongTinDDB.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTieuChiTimKiem = new javax.swing.JLabel();
        lblNhapThongTin = new javax.swing.JLabel();
        lblSapXep = new javax.swing.JLabel();
        lblLoaiDon = new javax.swing.JLabel();
        txtNhapThonTin = new javax.swing.JTextField();
        cbmTieuChiTimKiem = new javax.swing.JComboBox<>();
        cmbLoaiDon = new javax.swing.JComboBox<>();
        cmbSapXep = new javax.swing.JComboBox<>();
        radTangDan = new javax.swing.JRadioButton();
        radGiamDan = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabThongTinDDB = new javax.swing.JTable();
        btnReset = new gui.component.Button();
        btnTimKiem = new gui.component.Button();
        lblNhapThongTin1 = new javax.swing.JLabel();
        jdata1 = new com.toedter.calendar.JDateChooser();
        lblNhapThongTin2 = new javax.swing.JLabel();
        jdata2 = new com.toedter.calendar.JDateChooser();
        group = new ButtonGroup();

        group.add(radGiamDan);
        group.add(radTangDan);

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 718));

        lblTieuChiTimKiem.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblTieuChiTimKiem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTieuChiTimKiem.setText("Chọn tiêu chí tìm kiếm :");

        lblNhapThongTin.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblNhapThongTin.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNhapThongTin.setText("Nhập thông tin :");

        lblSapXep.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblSapXep.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSapXep.setText("Sắp xếp");

        lblLoaiDon.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblLoaiDon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblLoaiDon.setText("Chọn loại đơn");

        txtNhapThonTin.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtNhapThonTin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNhapThonTinActionPerformed(evt);
            }
        });

        cbmTieuChiTimKiem.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cbmTieuChiTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Chọn tiêu chí tìm kiếm --", "Mã đơn đặt bàn", "Số điện thoại", "Tên khách hàng" }));

        cmbLoaiDon.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cmbLoaiDon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Đang xử lí", "Đã hủy", "Đã đến" }));
        cmbLoaiDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLoaiDonActionPerformed(evt);
            }
        });

        cmbSapXep.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cmbSapXep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Chọn tiêu chí sắp xếp --", "Tiền cọc", "Ngày lập", "Giờ hẹn", " " }));
        cmbSapXep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSapXepActionPerformed(evt);
            }
        });

        radTangDan.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        radTangDan.setText("Tăng dần");
        radTangDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radTangDanActionPerformed(evt);
            }
        });

        radGiamDan.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        radGiamDan.setText("Giảm dần");
        radGiamDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGiamDanActionPerformed(evt);
            }
        });

        tabThongTinDDB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã đơn đặt bàn", "Tên khách hàng", "Tên nhân viên", "Ngày tạo", "Tổng cọc ", "Số điện thoại", "Trạng thái" ,"Giờ hẹn", "Số bàn"
            }
        ));
        tabThongTinDDB.setShowGrid(true);
        jScrollPane1.setViewportView(tabThongTinDDB);

        btnReset.setBackground(new java.awt.Color(50, 50, 50));
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icon/icons8-refresh-32.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        btnTimKiem.setBackground(new java.awt.Color(50, 50, 50));
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icon/icons8-search-32.png"))); // NOI18N
        btnTimKiem.setText("Tìm Kiếm");
        btnTimKiem.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        lblNhapThongTin1.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblNhapThongTin1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNhapThongTin1.setText("Từ :");

        jdata1.setDateFormatString("dd/MM/yyyy");
        jdata1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        lblNhapThongTin2.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        lblNhapThongTin2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNhapThongTin2.setText("Đến:");

        jdata2.setDateFormatString("dd/MM/yyyy");
        jdata2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(63, 63, 63))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNhapThongTin, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTieuChiTimKiem)
                                    .addComponent(lblNhapThongTin1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cbmTieuChiTimKiem, 0, 233, Short.MAX_VALUE)
                                        .addComponent(txtNhapThonTin))
                                    .addComponent(jdata2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNhapThongTin2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jdata1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLoaiDon)
                            .addComponent(lblSapXep))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbSapXep, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(radTangDan)
                                .addGap(40, 40, 40)
                                .addComponent(radGiamDan))
                            .addComponent(cmbLoaiDon, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(41, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTieuChiTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbmTieuChiTimKiem))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbLoaiDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblLoaiDon)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNhapThongTin)
                    .addComponent(txtNhapThonTin)
                    .addComponent(lblSapXep)
                    .addComponent(cmbSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radTangDan)
                        .addComponent(radGiamDan)
                        .addComponent(lblNhapThongTin1))
                    .addComponent(jdata2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblNhapThongTin2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jdata1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radTangDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radTangDanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radTangDanActionPerformed

    private void radGiamDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radGiamDanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radGiamDanActionPerformed

    private void txtNhapThonTinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNhapThonTinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNhapThonTinActionPerformed

    private void cmbSapXepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSapXepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSapXepActionPerformed

    private void cmbLoaiDonActionPerformed(java.awt.event.ActionEvent evt) {                                           

    }


    private void tabThongTinDDBMouseClicked(java.awt.event.MouseEvent evt) throws SQLException, SQLException {
        DonDatBan_DAO timKiemDonDatBan = new DonDatBan_DAO();
        // Lấy mã đơn dặt bàn
        int row = tabThongTinDDB.getSelectedRow();

        if(row != -1){
            String maDonDatBan = tabThongTinDDB.getValueAt(row,0).toString();
            Object[] ob = (Object[])timKiemDonDatBan.timDDB(maDonDatBan);
            ArrayList<Object[]> list = timKiemDonDatBan.timChiTietDonDatBan(maDonDatBan);
            //ob = new Object[]{hoTenKH, ngayTao, gioHen, soLuongKH, soDienThoai, loaiBan, tienCoc,hoanCoc,gioHuy,trangThai};
            //String hoTenKH, String ngayDat, String gioHen, String soLuongKH, String soDienThoai, ArrayList<Object[]> list,int tienCoc,String trangThai
            String hoTenKH = ob[0].toString();
            String ngayDat = ob[1].toString();
            String gioHen = ob[2].toString();
            String soLuongKH = ob[3].toString();
            String soDienThoai = ob[4].toString();
            float tienCoc = Float.parseFloat(ob[6].toString());
            if(ob[7] == null){
                ob[7] = "";
            }
            String hoanCoc = ob[7].toString();
            if(ob[8] == null){
                ob[8] = "";
            }
            String gioHuy = ob[8].toString();
            String trangThai = ob[9].toString();
            if(trangThai.equals("1") == true){
                trangThai = "Đang xử lí";
            }
            else if(trangThai.equals("3") == true){
                trangThai = "Đã hủy";
            }
            else if(trangThai.equals("2") == true){
                trangThai = "Thành công";
            }
            ChiTietDatBan_Form form = new ChiTietDatBan_Form(hoTenKH,ngayDat,gioHen,soLuongKH,soDienThoai,list,tienCoc,trangThai,hoanCoc,gioHuy);
            form.setVisible(true);
        }

    }

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
        thucThi();
    }

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
        deleteTableRow();
        cbmTieuChiTimKiem.setSelectedIndex(0);
        txtNhapThonTin.setText("");
        cmbLoaiDon.setSelectedIndex(0);
        cmbSapXep.setSelectedIndex(0);
        radTangDan.setSelected(false);
        radGiamDan.setSelected(false);
        jdata1.setDate(null);
        jdata2.setDate(null);
    }

    public void thucThi() throws SQLException {
        if(checkValue()){
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            DonDatBan_DAO dao_timKiemDonDatBan = new DonDatBan_DAO();
            String txtTieuChiTimKiem = cbmTieuChiTimKiem.getSelectedItem().toString();
            String txtNhapThongTin = txtNhapThonTin.getText().toString();
            String txtLoaiDon = cmbLoaiDon.getSelectedItem().toString();
            String txtNgay1 = "";
            String txtNgay2 = "";

            if(jdata1.getDate() != null && jdata2.getDate() != null){
                txtNgay1 = dateFormat.format(jdata1.getDate());
                txtNgay2 = dateFormat.format(jdata2.getDate());
            }

            System.out.println(txtNgay1);
            System.out.println(txtNgay2);

            String loaiDon = "";
            if(txtLoaiDon.equals("Tất cả") == true){
                loaiDon = "";
            }
            else if(txtLoaiDon.equals("Đang xử lí") == true){
                loaiDon = "1";
            }
            else if(txtLoaiDon.equals("Đã hủy") == true){
                loaiDon = "3";
            }
            else if(txtLoaiDon.equals("Đã đến") == true){
                loaiDon = "2";
            }

            String txtSapXep = cmbSapXep.getSelectedItem().toString();
            if(txtSapXep.equals("-- Chọn tiêu chí sắp xếp --")){
                txtSapXep =  "";
            }
            else if(txtSapXep.equals("Tiền cọc") == true){
                txtSapXep = "tienCoc";
            }
            else if(txtSapXep.equals("Ngày lập") == true){
                txtSapXep = "ngayTao";
            }
            else if(txtSapXep.equals("Giờ hẹn") == true){
                txtSapXep = "gioHen";
            }
            String txtSort = radTangDan.isSelected() == true ? "ASC" : "DESC";
            deleteTableRow();

            if(txtTieuChiTimKiem.equals("Mã đơn đặt bàn") == true){
                Object[] ob = (Object[])dao_timKiemDonDatBan.timKiemDonDatBanMa(txtNhapThongTin,txtNgay2,txtNgay1);
                if(ob == null || ob.length == 0){
                    JOptionPane.showMessageDialog(null, "Không tìm thấy đơn đặt bàn");
                    return;
                }

                DefaultTableModel model = (DefaultTableModel) tabThongTinDDB.getModel();
                ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                model.addRow(ob);
            }
            else if(txtTieuChiTimKiem.equals("Số điện thoại") == true){
                ArrayList<Object[]> list = dao_timKiemDonDatBan.timKiemDonDatBanPhone(txtNhapThongTin, loaiDon, txtSapXep, txtSort,txtNgay2,txtNgay1);
                if(list.size() == 0){
                    JOptionPane.showMessageDialog(null, "Không tìm thấy đơn đặt bàn");
                    return;
                }
                DefaultTableModel model = (DefaultTableModel) tabThongTinDDB.getModel();
                for(Object[] ob : list){
                    ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                    model.addRow(ob);
                }
            }
            else if(txtTieuChiTimKiem.equals("Tên khách hàng") == true){
                ArrayList<Object[]> list = dao_timKiemDonDatBan.timKiemDonDatBanName(txtNhapThongTin, loaiDon, txtSapXep, txtSort,txtNgay2,txtNgay1);
                if(list.size() == 0){
                    JOptionPane.showMessageDialog(null, "Không tìm thấy đơn đặt bàn");
                    return;
                }
                DefaultTableModel model = (DefaultTableModel) tabThongTinDDB.getModel();
                for(Object[] ob : list){
                    ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                    model.addRow(ob);
                }
            }
        }


    }

    public void deleteTableRow(){
        DefaultTableModel model = (DefaultTableModel) tabThongTinDDB.getModel();
        model.getDataVector().removeAllElements();
    }

    public boolean checkValue(){
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String txtTieuChiTimKiem = cbmTieuChiTimKiem.getSelectedItem().toString();
        String txtSapXep = cmbSapXep.getSelectedItem().toString();
        
        String txtNgay1 = "";
        String txtNgay2 = "";
       

        if(jdata1.getDate() != null && jdata2.getDate() != null){
            txtNgay1 = dateFormat.format(jdata1.getDate());
            txtNgay2 = dateFormat.format(jdata2.getDate());
        }
        
        System.out.println(txtNgay1);        
        System.out.println(txtNgay2);

        
        if(txtTieuChiTimKiem.equals("-- Chọn tiêu chí tìm kiếm --") == true){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn tiêu chí tìm kiếm");
            return false;
        }
        else if(txtSapXep.equals("-- Chọn tiêu chí sắp xếp --") == false && (radGiamDan.isSelected() == false && radTangDan.isSelected() == false)){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn tiêu chí sắp xếp");
            return false;
        }
        else if(txtNgay1.compareTo(txtNgay2) < 0){
            System.out.println("gui.form.TimDonDatBan_PN.checkValue()");
            JOptionPane.showMessageDialog(null, "Ngày chọn sau phải lớn hơn ngày chọn trước");
            return false;
        }
        
        return true;

    }

    private void load(){
        try{
            DonDatBan_DAO dao_timKiemDonDatBan = new DonDatBan_DAO();
            ArrayList<Object[]> list = dao_timKiemDonDatBan.donDatBanTrongNgay();
            DefaultTableModel model = (DefaultTableModel) tabThongTinDDB.getModel();
            for(Object[] ob : list){
                ob[4] = dinhDangVND(Double.parseDouble(ob[4].toString()));
                model.addRow(ob);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public String dinhDangVND(double x){
        DecimalFormat decimalFormat = new DecimalFormat("#,###");
        String formatted = decimalFormat.format(x).replace(",", " ");

        return formatted + " VNĐ";
    }

    public int huyDinhDangVND(String s){
        String newString[] = s.split("\\s+");
        String newS = "";
        for (int i = 0; i < newString.length - 1; i++) {
            newS += newString[i];
        }

        return Integer.parseInt(newS);
    }







    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.component.Button btnTimKiem;
    private gui.component.Button btnReset;
    private javax.swing.JComboBox<String> cbmTieuChiTimKiem;
    private javax.swing.JComboBox<String> cmbLoaiDon;
    private javax.swing.JComboBox<String> cmbSapXep;
    private com.toedter.calendar.JDateChooser jdata1;
    private com.toedter.calendar.JDateChooser jdata2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLoaiDon;
    private javax.swing.JLabel lblNhapThongTin;
    private javax.swing.JLabel lblNhapThongTin1;
    private javax.swing.JLabel lblNhapThongTin2;
    private javax.swing.JLabel lblSapXep;
    private javax.swing.JLabel lblTieuChiTimKiem;
    private javax.swing.JRadioButton radGiamDan;
    private javax.swing.JRadioButton radTangDan;
    private javax.swing.JTable tabThongTinDDB;
    private javax.swing.JTextField txtNhapThonTin;
    private javax.swing.ButtonGroup group;
    // End of variables declaration//GEN-END:variables
}
